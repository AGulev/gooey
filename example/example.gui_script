local gooey = require "gooey.gooey"

local function shake(node, initial_scale)
	gui.cancel_animation(node, "scale.x")
	gui.cancel_animation(node, "scale.y")
	gui.set_scale(node, initial_scale)
	local scale = gui.get_scale(node)
	gui.set_scale(node, scale * 1.2)
	gui.animate(node, "scale.x", scale.x, gui.EASING_OUTELASTIC, 0.8)
	gui.animate(node, "scale.y", scale.y, gui.EASING_OUTELASTIC, 0.8, 0.05, function()
		gui.set_scale(node, initial_scale)
	end)
end

local function update_button(button)
	if button.pressed_now or button.released_now then
		shake(button.node, vmath.vector3(1))
	end
	if button.pressed then
		gui.play_flipbook(button.node, hash("blue_button05"))
	else
		gui.play_flipbook(button.node, hash("blue_button04"))
	end
end

local function update_checkbox(checkbox)
	if checkbox.pressed_now or checkbox.released_now then
		shake(checkbox.node, vmath.vector3(1))
	end
	if checkbox.pressed then
		gui.play_flipbook(checkbox.node, hash("grey_boxCross"))
	elseif checkbox.checked then
		gui.play_flipbook(checkbox.node, hash("blue_boxCross"))
	else
		gui.play_flipbook(checkbox.node, hash("grey_box"))
	end		
end

local function update_radio(radio)
	if radio.pressed_now or radio.released_now then
		shake(radio.node, vmath.vector3(1))
	end
	if radio.pressed then
		gui.play_flipbook(radio.node, hash("grey_boxTick"))
	elseif radio.selected then
		gui.play_flipbook(radio.node, hash("blue_boxTick"))
	else
		gui.play_flipbook(radio.node, hash("grey_circle"))
	end		
end

local function update_list(list)
	for i,item in pairs(list.items) do
		local pos = gui.get_position(item)
		if i == list.selected_item then
			pos.x = 4
			gui.play_flipbook(item, hash("blue_button03"))
		elseif i == list.pressed_item then
			pos.x = 1
			gui.play_flipbook(item, hash("blue_button03"))
		elseif i == list.over_item_now then
			pos.x = 1
			gui.play_flipbook(item, hash("blue_button04"))
		elseif i == list.out_item_now then
			pos.x = 0
			gui.play_flipbook(item, hash("blue_button04"))
		elseif i ~= list.over_item then
			pos.x = 0
			gui.play_flipbook(item, hash("blue_button04"))
		end
		gui.set_position(item, pos)
	end
end

local function update_input(input, empty_text, cursor_id)
	local text = input.masked_text or input.text
	local marked_text = input.masked_marked_text or input.marked_text
	if text == "" and marked_text == "" and not input.selected then
		text = empty_text
	end

	local cursor = gui.get_node(cursor_id)
	if input.selected then
		local m_t = gui.get_text_metrics(gui.get_font(input.node), text, 0, false, 0, 0)
		local m_m = gui.get_text_metrics(gui.get_font(input.node), marked_text, 0, false, 0, 0)
		gui.set_enabled(cursor, true)
		gui.set_position(cursor, vmath.vector3(4 + m_t.width, 0, 0))
		gui.cancel_animation(cursor, gui.PROP_COLOR)
		gui.set_color(cursor, vmath.vector4(1))
		gui.animate(cursor, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INSINE, 0.8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	else
		gui.set_enabled(cursor, false)
		gui.cancel_animation(cursor, gui.PROP_COLOR)
	end
	
	gui.set_text(input.node, text .. marked_text)
end


function init(self)
	gooey.acquire_input()
	self.list_ids = {
		"listitem1/bg", "listitem2/bg", "listitem3/bg", "listitem4/bg", "listitem5/bg",
		"listitem6/bg", "listitem7/bg", "listitem8/bg", "listitem9/bg", "listitem10/bg",
		"listitem11/bg", "listitem12/bg"
	}
	update_input(gooey.input("input/text", gui.KEYBOARD_TYPE_DEFAULT, nil, { x=0, y=0 }), "EMPTY TEXT", "input/cursor")
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.1, 0.15, 0.25, 1.0) })
end

function on_input(self, action_id, action)
	update_button(gooey.button("button/bg", action_id, action, function(button)
		print("pressed button")
	end))
	
	update_checkbox(gooey.checkbox("checkbox/box", action_id, action, function(checkbox)
		print("checked", checkbox.checked)
	end))
	
	local radio1 = gooey.radio("radio1/button", "GROUP1", action_id, action, function(radio)
		print("selected 1", radio.selected)
	end)
	local radio2 = gooey.radio("radio2/button", "GROUP1", action_id, action, function(radio)
		print("selected 2", radio.selected)
	end)
	local radio3 = gooey.radio("radio3/button", "GROUP1", action_id, action, function(radio)
		print("selected 3", radio.selected)
	end)
	update_radio(radio1)
	update_radio(radio2)
	update_radio(radio3)
	
	update_list(gooey.list("listroot", self.list_ids, action_id, action, function(list)
		print("selected list item", list.selected_item)
	end))
	
	update_input(gooey.input("input/text", gui.KEYBOARD_TYPE_DEFAULT, action_id, action), "EMPTY TEXT", "input/cursor")
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
